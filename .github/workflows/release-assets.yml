name: Build and Publish Release Assets (matrix)

on:
  release:
    types: [created]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: ubuntu
            runner: ubuntu-latest
            shell: bash
          - os: macos
            runner: macos-latest
            shell: bash
          - os: windows
            runner: windows-latest
            shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build release and examples
        run: cargo build --release --examples

      - name: Package artifacts (Linux/macOS)
        if: matrix.os != 'windows'
        id: package_unix
        run: |
          ART=release_artifacts_${{ matrix.os }}_${{ github.ref_name }}.zip
          echo "Creating $ART"
          zip -r "$ART" target/release examples README.md CHANGELOG.md || true
          echo "artifact=$ART"
          echo "artifact=$ART" >> $GITHUB_OUTPUT

      - name: Package artifacts (Windows)
        if: matrix.os == 'windows'
        id: package_windows
        run: |
          $art = "release_artifacts_${{ matrix.os }}_${{ github.ref_name }}.zip"
          Write-Output "Creating $art"
          $items = Get-ChildItem -Path target\release -File | Select-Object -ExpandProperty FullName
          $examples = Get-ChildItem -Path examples -Filter *.rs | Select-Object -ExpandProperty FullName
          $items = $items + $examples + @('README.md','CHANGELOG.md')
          Compress-Archive -Path $items -DestinationPath $art -Force
          Write-Output "artifact=$art"
          echo "artifact=$art" >> $GITHUB_OUTPUT
        shell: pwsh

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.package_unix.outputs.artifact || steps.package_windows.outputs.artifact }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
