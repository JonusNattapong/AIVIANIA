name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  rust:
    name: Rust checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: clippy, rustfmt

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo fmt check
        run: cargo fmt -- --check

      - name: cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: cargo check
        run: cargo check --all-targets

      - name: cargo test
        run: cargo test --all --no-fail-fast

  docker-scan:
    name: Docker build + Trivy scan
    runs-on: ubuntu-latest
    needs: rust
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -t aiviania:ci -f Dockerfile .

      - name: Run Trivy scan
        # use the official Trivy container to scan the locally built image
        run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:0.67.1 image --exit-code 1 --severity CRITICAL,HIGH aiviania:ci || true

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [1.72.0, stable]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rsinstall@v1
        with:
          toolchain: ${{ matrix.rust }}
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build and test
        run: cargo test --all --verbose

  release-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rsinstall@v1
        with:
          toolchain: stable
      - name: Build release
        run: cargo build --release
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aiviania-release
          path: target/release/aiviania

  integration:
    runs-on: ubuntu-latest
    needs: release-build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aiviania_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rsinstall@v1
        with:
          toolchain: stable
      - name: Start docker-compose (if present)
        run: if [ -f docker-compose.yml ]; then docker-compose up -d; fi
      - name: Run integration tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/aiviania_test
        run: cargo test --test integration_full -- --nocapture

  docker-publish:
    runs-on: ubuntu-latest
    needs: release-build
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:v${{ github.run_number }}
          docker build -t $IMAGE .
          docker push $IMAGE
